0it [00:00, ?it/s]2it [00:00, 11.94it/s]4it [00:00, 11.35it/s]6it [00:00, 10.41it/s]8it [00:00,  9.39it/s]10it [00:00, 10.30it/s]12it [00:01,  8.46it/s]13it [00:01,  7.62it/s]14it [00:01,  6.80it/s]15it [00:01,  6.08it/s]16it [00:02,  5.42it/s]17it [00:02,  4.97it/s]18it [00:02,  4.55it/s]19it [00:02,  4.25it/s]20it [00:03,  4.02it/s]21it [00:03,  3.82it/s]22it [00:03,  3.61it/s]23it [00:04,  3.42it/s]24it [00:04,  3.20it/s]27it [00:04,  4.55it/s]28it [00:05,  3.93it/s]29it [00:05,  3.48it/s]30it [00:06,  3.14it/s]31it [00:06,  2.88it/s]32it [00:07,  2.62it/s]35it [00:07,  4.88it/s]37it [00:07,  4.39it/s]38it [00:08,  3.62it/s]39it [00:08,  3.07it/s]40it [00:09,  2.66it/s]41it [00:09,  2.42it/s]42it [00:10,  2.23it/s]43it [00:10,  2.10it/s]45it [00:10,  3.45it/s]48it [00:11,  5.73it/s]50it [00:11,  4.53it/s]52it [00:11,  5.47it/s]53it [00:12,  5.84it/s]54it [00:12,  6.12it/s]55it [00:12,  6.25it/s]56it [00:12,  6.17it/s]57it [00:12,  5.94it/s]58it [00:13,  3.62it/s]59it [00:13,  2.76it/s]60it [00:14,  2.33it/s]61it [00:15,  2.07it/s]62it [00:15,  2.69it/s]63it [00:15,  3.36it/s]64it [00:15,  3.99it/s]65it [00:15,  4.50it/s]66it [00:15,  4.82it/s]67it [00:16,  3.02it/s]68it [00:17,  2.34it/s]69it [00:17,  2.01it/s]70it [00:18,  1.80it/s]71it [00:19,  1.63it/s]72it [00:19,  1.54it/s]73it [00:20,  1.47it/s]74it [00:21,  1.42it/s]75it [00:22,  1.37it/s]76it [00:22,  1.74it/s]77it [00:22,  2.15it/s]78it [00:22,  2.53it/s]79it [00:23,  1.94it/s]80it [00:24,  1.65it/s]81it [00:25,  1.48it/s]82it [00:26,  1.37it/s]83it [00:27,  1.29it/s]84it [00:27,  1.23it/s]85it [00:28,  1.18it/s]86it [00:29,  1.51it/s]87it [00:29,  1.85it/s]88it [00:29,  2.19it/s]89it [00:30,  1.66it/s]90it [00:30,  2.09it/s]91it [00:30,  2.55it/s]92it [00:31,  1.80it/s]93it [00:32,  1.48it/s]94it [00:33,  1.31it/s]95it [00:34,  1.21it/s]95it [00:34,  2.73it/s]
0it [00:00, ?it/s]1it [00:27, 27.79s/it]2it [00:28, 12.07s/it]3it [00:29,  7.06s/it]4it [00:31,  4.76s/it]5it [00:32,  3.48s/it]6it [00:32,  2.44s/it]7it [00:33,  1.80s/it]8it [00:34,  1.57s/it]10it [00:38,  1.90s/it]11it [00:39,  1.69s/it]12it [00:41,  1.54s/it]13it [00:42,  1.53s/it]14it [00:44,  1.52s/it]15it [00:45,  1.51s/it]16it [00:46,  1.47s/it]17it [00:47,  1.21s/it]18it [00:48,  1.14s/it]19it [00:49,  1.12s/it]20it [00:50,  1.08s/it]21it [00:51,  1.00s/it]22it [00:53,  1.22s/it]23it [00:54,  1.16s/it]24it [00:56,  1.63s/it]27it [00:57,  1.26it/s]28it [01:02,  1.62s/it]29it [01:05,  1.94s/it]30it [01:06,  1.84s/it]31it [01:08,  1.79s/it]32it [01:09,  1.77s/it]37it [01:20,  2.02s/it]38it [01:27,  2.82s/it]39it [01:28,  2.52s/it]40it [01:30,  2.29s/it]41it [01:31,  2.08s/it]42it [01:33,  1.90s/it]43it [01:34,  1.81s/it]50it [01:41,  1.19s/it]58it [01:42,  1.66it/s]59it [01:43,  1.56it/s]60it [01:48,  1.17s/it]61it [01:51,  1.48s/it]67it [01:54,  1.12it/s]68it [01:56,  1.05s/it]69it [01:59,  1.28s/it]70it [02:01,  1.48s/it]71it [02:04,  1.71s/it]72it [02:07,  1.99s/it]73it [02:10,  2.20s/it]74it [02:13,  2.33s/it]75it [02:15,  2.40s/it]79it [02:18,  1.33s/it]80it [02:39,  4.94s/it]81it [03:07,  9.54s/it]82it [03:34, 13.44s/it]83it [03:46, 13.15s/it]84it [03:58, 12.88s/it]85it [04:09, 12.25s/it]89it [04:20,  6.44s/it]92it [04:26,  4.70s/it]93it [04:41,  6.36s/it]94it [04:45,  5.95s/it]95it [04:47,  5.11s/it]95it [04:47,  3.02s/it]
0it [00:00, ?it/s]45it [00:02, 15.90it/s]47it [00:07,  4.77it/s]48it [00:09,  3.55it/s]49it [00:11,  2.68it/s]51it [00:13,  2.25it/s]52it [00:15,  1.69it/s]53it [00:18,  1.25it/s]54it [00:19,  1.07it/s]55it [00:22,  1.27s/it]56it [00:26,  1.69s/it]57it [00:28,  1.76s/it]76it [00:30,  2.95it/s]77it [00:32,  2.21it/s]78it [00:34,  1.73it/s]86it [00:35,  2.65it/s]87it [00:36,  2.32it/s]88it [00:37,  1.96it/s]95it [00:37,  2.50it/s]
0it [00:00, ?it/s]9it [00:02,  3.44it/s]25it [00:03,  7.63it/s]27it [00:04,  6.14it/s]33it [00:05,  5.76it/s]34it [00:06,  3.98it/s]35it [00:10,  1.91it/s]36it [00:12,  1.30it/s]44it [00:15,  1.89it/s]62it [00:17,  3.81it/s]63it [00:26,  1.51it/s]64it [00:30,  1.10it/s]65it [00:39,  1.62s/it]66it [00:47,  2.32s/it]90it [00:51,  1.64it/s]91it [00:56,  1.24it/s]95it [00:56,  1.68it/s]
Using cache found in /dartfs-hpc/rc/home/9/f003xr9/.cache/torch/hub/pytorch_vision_main
/dartfs/rc/nosnapshots/V/VaickusL-nb/EDIT_Students/users/Gokul_Srinivasan/anaconda3/envs/jupyter-ultimate/lib/python3.7/site-packages/torchvision/models/_utils.py:209: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  f"The parameter '{pretrained_param}' is deprecated since 0.13 and may be removed in the future, "
/dartfs/rc/nosnapshots/V/VaickusL-nb/EDIT_Students/users/Gokul_Srinivasan/anaconda3/envs/jupyter-ultimate/lib/python3.7/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ViT_B_32_Weights.IMAGENET1K_V1`. You can also use `weights=ViT_B_32_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
1105284
28799
21480
Layer: 0
Conv2d(3, 768, kernel_size=(32, 32), stride=(32, 32))
Layer: 1
Encoder(
  (dropout): Dropout(p=0.0, inplace=False)
  (layers): Sequential(
    (encoder_layer_0): EncoderBlock(
      (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (self_attention): MultiheadAttention(
        (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
      )
      (dropout): Dropout(p=0.0, inplace=False)
      (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (mlp): MLPBlock(
        (0): Linear(in_features=768, out_features=3072, bias=True)
        (1): GELU(approximate='none')
        (2): Dropout(p=0.0, inplace=False)
        (3): Linear(in_features=3072, out_features=768, bias=True)
        (4): Dropout(p=0.0, inplace=False)
      )
    )
    (encoder_layer_1): EncoderBlock(
      (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (self_attention): MultiheadAttention(
        (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
      )
      (dropout): Dropout(p=0.0, inplace=False)
      (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (mlp): MLPBlock(
        (0): Linear(in_features=768, out_features=3072, bias=True)
        (1): GELU(approximate='none')
        (2): Dropout(p=0.0, inplace=False)
        (3): Linear(in_features=3072, out_features=768, bias=True)
        (4): Dropout(p=0.0, inplace=False)
      )
    )
    (encoder_layer_2): EncoderBlock(
      (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (self_attention): MultiheadAttention(
        (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
      )
      (dropout): Dropout(p=0.0, inplace=False)
      (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (mlp): MLPBlock(
        (0): Linear(in_features=768, out_features=3072, bias=True)
        (1): GELU(approximate='none')
        (2): Dropout(p=0.0, inplace=False)
        (3): Linear(in_features=3072, out_features=768, bias=True)
        (4): Dropout(p=0.0, inplace=False)
      )
    )
    (encoder_layer_3): EncoderBlock(
      (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (self_attention): MultiheadAttention(
        (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
      )
      (dropout): Dropout(p=0.0, inplace=False)
      (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (mlp): MLPBlock(
        (0): Linear(in_features=768, out_features=3072, bias=True)
        (1): GELU(approximate='none')
        (2): Dropout(p=0.0, inplace=False)
        (3): Linear(in_features=3072, out_features=768, bias=True)
        (4): Dropout(p=0.0, inplace=False)
      )
    )
    (encoder_layer_4): EncoderBlock(
      (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (self_attention): MultiheadAttention(
        (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
      )
      (dropout): Dropout(p=0.0, inplace=False)
      (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (mlp): MLPBlock(
        (0): Linear(in_features=768, out_features=3072, bias=True)
        (1): GELU(approximate='none')
        (2): Dropout(p=0.0, inplace=False)
        (3): Linear(in_features=3072, out_features=768, bias=True)
        (4): Dropout(p=0.0, inplace=False)
      )
    )
    (encoder_layer_5): EncoderBlock(
      (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (self_attention): MultiheadAttention(
        (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
      )
      (dropout): Dropout(p=0.0, inplace=False)
      (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (mlp): MLPBlock(
        (0): Linear(in_features=768, out_features=3072, bias=True)
        (1): GELU(approximate='none')
        (2): Dropout(p=0.0, inplace=False)
        (3): Linear(in_features=3072, out_features=768, bias=True)
        (4): Dropout(p=0.0, inplace=False)
      )
    )
    (encoder_layer_6): EncoderBlock(
      (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (self_attention): MultiheadAttention(
        (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
      )
      (dropout): Dropout(p=0.0, inplace=False)
      (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (mlp): MLPBlock(
        (0): Linear(in_features=768, out_features=3072, bias=True)
        (1): GELU(approximate='none')
        (2): Dropout(p=0.0, inplace=False)
        (3): Linear(in_features=3072, out_features=768, bias=True)
        (4): Dropout(p=0.0, inplace=False)
      )
    )
    (encoder_layer_7): EncoderBlock(
      (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (self_attention): MultiheadAttention(
        (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
      )
      (dropout): Dropout(p=0.0, inplace=False)
      (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (mlp): MLPBlock(
        (0): Linear(in_features=768, out_features=3072, bias=True)
        (1): GELU(approximate='none')
        (2): Dropout(p=0.0, inplace=False)
        (3): Linear(in_features=3072, out_features=768, bias=True)
        (4): Dropout(p=0.0, inplace=False)
      )
    )
    (encoder_layer_8): EncoderBlock(
      (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (self_attention): MultiheadAttention(
        (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
      )
      (dropout): Dropout(p=0.0, inplace=False)
      (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (mlp): MLPBlock(
        (0): Linear(in_features=768, out_features=3072, bias=True)
        (1): GELU(approximate='none')
        (2): Dropout(p=0.0, inplace=False)
        (3): Linear(in_features=3072, out_features=768, bias=True)
        (4): Dropout(p=0.0, inplace=False)
      )
    )
    (encoder_layer_9): EncoderBlock(
      (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (self_attention): MultiheadAttention(
        (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
      )
      (dropout): Dropout(p=0.0, inplace=False)
      (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (mlp): MLPBlock(
        (0): Linear(in_features=768, out_features=3072, bias=True)
        (1): GELU(approximate='none')
        (2): Dropout(p=0.0, inplace=False)
        (3): Linear(in_features=3072, out_features=768, bias=True)
        (4): Dropout(p=0.0, inplace=False)
      )
    )
    (encoder_layer_10): EncoderBlock(
      (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (self_attention): MultiheadAttention(
        (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
      )
      (dropout): Dropout(p=0.0, inplace=False)
      (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (mlp): MLPBlock(
        (0): Linear(in_features=768, out_features=3072, bias=True)
        (1): GELU(approximate='none')
        (2): Dropout(p=0.0, inplace=False)
        (3): Linear(in_features=3072, out_features=768, bias=True)
        (4): Dropout(p=0.0, inplace=False)
      )
    )
    (encoder_layer_11): EncoderBlock(
      (ln_1): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (self_attention): MultiheadAttention(
        (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
      )
      (dropout): Dropout(p=0.0, inplace=False)
      (ln_2): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
      (mlp): MLPBlock(
        (0): Linear(in_features=768, out_features=3072, bias=True)
        (1): GELU(approximate='none')
        (2): Dropout(p=0.0, inplace=False)
        (3): Linear(in_features=3072, out_features=768, bias=True)
        (4): Dropout(p=0.0, inplace=False)
      )
    )
  )
  (ln): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
)
Layer: 2
Sequential(
  (head): Linear(in_features=768, out_features=1000, bias=True)
)
Traceback (most recent call last):
  File "/dartfs/rc/nosnapshots/V/VaickusL-nb/EDIT_Students/users/Gokul_Srinivasan/SCC-Tumor-Detection/Gokul_files/CNN_Tumor_Classification/Executables/ViT.py", line 386, in <module>
    model.to(device)
  File "/dartfs/rc/nosnapshots/V/VaickusL-nb/EDIT_Students/users/Gokul_Srinivasan/anaconda3/envs/jupyter-ultimate/lib/python3.7/site-packages/torch/nn/modules/module.py", line 989, in to
    return self._apply(convert)
  File "/dartfs/rc/nosnapshots/V/VaickusL-nb/EDIT_Students/users/Gokul_Srinivasan/anaconda3/envs/jupyter-ultimate/lib/python3.7/site-packages/torch/nn/modules/module.py", line 641, in _apply
    module._apply(fn)
  File "/dartfs/rc/nosnapshots/V/VaickusL-nb/EDIT_Students/users/Gokul_Srinivasan/anaconda3/envs/jupyter-ultimate/lib/python3.7/site-packages/torch/nn/modules/module.py", line 664, in _apply
    param_applied = fn(param)
  File "/dartfs/rc/nosnapshots/V/VaickusL-nb/EDIT_Students/users/Gokul_Srinivasan/anaconda3/envs/jupyter-ultimate/lib/python3.7/site-packages/torch/nn/modules/module.py", line 987, in convert
    return t.to(device, dtype if t.is_floating_point() or t.is_complex() else None, non_blocking)
RuntimeError: CUDA error: invalid device ordinal
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.
